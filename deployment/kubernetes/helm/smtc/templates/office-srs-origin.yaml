
{{- range $scenarioIdx, $scenarioName := $.Values.scenario }}
{{- $args := dict "scenarioName" $scenarioName "Values" $.Values }}
{{- range $officeIdx := until ( int ( include "smtc.noffices" $args ) ) }}
{{- $officeName := printf "%s-office%d" $scenarioName (add $officeIdx 1) }}
{{- $scope1 := printf "office%d-svc" (add $officeIdx 1) }}
{{- if contains $.Values.buildScope $scope1 }}
{{- $officeIdx2 := add (mul $officeIdx (len $.Values.scenario)) $scenarioIdx }}

{{- if int ($.Values.discoverRTMP) }}


apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $officeName }}-srs-origin-config
data:
  srs.conf: |-
    listen              1935;
    max_connections     1000;
    daemon              off;
    http_api {
        enabled         on;
        listen          1985;
    }
    http_server {
        enabled         on;
        listen          8080;
    }
    stream_caster {
        enabled             on;
        caster              gb28181;
        output              rtmp://127.0.0.1:1935/live/[stream];
        listen              9000;
        rtp_port_min        58200;
        rtp_port_max        58300;
        wait_keyframe       on;
        rtp_idle_timeout    30;
        audio_enable        off;
        jitterbuffer_enable  on;
        host   {{ $.Values.cloudWebExternalIP }};
        auto_create_channel   off;

        sip {
            enabled             on;
            listen              5060;
            serial              34020000002000000001;
            realm               3402000000;
            ack_timeout         30;
            keepalive_timeout   120;
            auto_play           on;
            invite_port_fixed     on;
            query_catalog_interval  60;
        }
    }
    vhost __defaultVhost__ {
        cluster {
            origin_cluster  on;
            coworkers       {{- range $srsIdx := until ( int ($.Values.srs.haOffice) ) }}  {{ $officeName }}-srs-origin-{{ $srsIdx }}.socs {{- end }};
        }
        http_remux {
            enabled     on;
        }
        hls {
            enabled     on;
        }
    }

---

apiVersion: v1
kind: Service
metadata:
  name: {{ $officeName }}-srs-origin-service
  labels:
    app: {{ $officeName }}-srs-origin
spec:
  ports:
    - name: srs-service-1935-1935
      port: 1935
      protocol: TCP
      targetPort: 1935
    - name: srs-service-9000-9000
      port: 9000
      protocol: UDP
      targetPort: 9000
    - name: srs-service-5060-5060
      port: 5060
      protocol: UDP
      targetPort: 5060
  externalIPs:
    - {{ $.Values.cloudWebExternalIP }}
  selector:
    app: {{ $officeName }}-srs-origin

---

{{- range $srsIdx := until ( int ( $.Values.srs.haOffice ) ) }}
apiVersion: v1
kind: Service
metadata:
  name: {{ $officeName }}-srs-origin-{{ $srsIdx }}-api-service
  labels:
    app: {{ $officeName }}-srs
spec:
  ports:
    - name: srs-service-1985-1985
      port: 1985
      protocol: TCP
      targetPort: 1985
  selector:
    statefulset.kubernetes.io/pod-name: {{ $officeName }}-srs-origin-{{ $srsIdx }}

---
{{- end }}

apiVersion: apps/v1
kind: StatefulSet 
metadata:
  name: {{ $officeName }}-srs-origin
  labels:
     app: {{ $officeName }}-srs-origin
spec:
  serviceName: "socs"
  replicas: {{ $.Values.srs.haOffice }}
  selector:
    matchLabels:
      app: {{ $officeName }}-srs-origin
  template:
    metadata:
      labels:
        app: {{ $officeName }}-srs-origin
    spec:
      enableServiceLinks: false
      securityContext:
        fsGroup: {{ $.Values.groupId }}
      containers:
        - name: {{ $officeName }}-srs-origin
          image: {{ $.Values.registryPrefix }}smtc_sensor_srs:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 1935
            - containerPort: 1985
            - containerPort: 8080
            - containerPort: 9000
            - containerPort: 5060
          env:
            - name: NO_PROXY
              value: "*"
            - name: no_proxy
              value: "*"
          volumeMounts:
            - mountPath: /etc/localtime
              name: timezone
              readOnly: true
            - mountPath: /var/www/video
              name: video-archive
            - mountPath: /usr/local/srs/conf
              name: config-volume
          resources:
            limits:
              cpu: "4"
      volumes:
        - name: timezone
          hostPath:
            path: /etc/localtime
            type: File
        - name: config-volume
          configMap:
            name: {{ $officeName }}-srs-origin-config
        - name: video-archive
          emptyDir:
            medium: Memory
            sizeLimit: 150Mi
      {{ include "smtc.platform.node-selector" $ }}

{{- end }}
---

{{- end }}
{{- end }}
{{- end }}
