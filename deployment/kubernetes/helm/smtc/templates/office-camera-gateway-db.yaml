
{{- range $scenarioIdx, $scenarioName := $.Values.scenario }}
{{- $args := dict "scenarioName" $scenarioName "Values" $.Values }}
{{- range $officeIdx := until ( int ( include "smtc.noffices" $args ) ) }}
{{- $officeName := printf "%s-office%d" $scenarioName (add $officeIdx 1) }}
{{- $scope1 := printf "office%d-camera" (add $officeIdx 1) }}
{{- if contains $.Values.buildScope $scope1 }}

{{- $args := dict "Values" $.Values }}
{{- $cameraGateway := include "smtc.cameraGateway" $args }}

{{- if eq $cameraGateway "enable" }}

apiVersion: v1
kind: Service
metadata:
  name: {{ $officeName }}-camera-gateway-db-service
  labels:
    app: {{ $officeName }}-camera-gateway-db
spec:
  clusterIP: None
  ports:
  - port: 9200
    protocol: TCP
  selector:
    app: {{ $officeName }}-camera-gateway-db

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $officeName }}-camera-gateway-db
  labels:
     app: {{ $officeName }}-camera-gateway-db
spec:
  serviceName: {{ $officeName }}-camera-gateway-db
  replicas: {{ int $.Values.database.haOffice }}
  selector:
    matchLabels:
      app: {{ $officeName }}-camera-gateway-db
  template:
    metadata:
      labels:
        app: {{ $officeName }}-camera-gateway-db
        database: "yes"
    spec:
      enableServiceLinks: false
      securityContext:
        fsGroup: 1000
      containers:
        - name: {{ $officeName }}-camera-gateway-db
          image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.13
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9200
            - containerPort: 9300
          env:
            - name: "cluster.name"
              value: "office-cluster"
            - name: "node.name"
              value: "{{ $officeName }}"
            - name: "node.master"
              value: "true"
            - name: "node.data"
              value: "true"
            - name: "action.auto_create_index"
              value: "0"
            - name: "ES_JAVA_OPTS"
              value: "-Xms2048m -Xmx2048m"
            - name: "discovery.zen.minimum_master_nodes"
              value: "{{ if eq (mod (int $.Values.database.haOffice) 2) 0 }}{{ sub (int $.Values.database.haOffice) 1 }}{{ else }}{{ int $.Values.database.haOffice }}{{ end }}"
            - name: "discovery.zen.ping.unicast.hosts"
              value: "{{ $officeName }}-camera-gateway-db-service"
            - name: NO_PROXY
              value: "*"
            - name: no_proxy
              value: "*"
          volumeMounts:
            - mountPath: /etc/localtime
              name: timezone
              readOnly: true
          lifecycle:
            preStop:
              exec:
                {{- $args := dict "scenarioName" $scenarioName "Values" $.Values "officeIdx" $officeIdx }}
                command: ["/usr/bin/curl","-X","DELETE","http://localhost:9200/sensors_*"]
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
      initContainers:
        - name: init-volume-sysctl
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: ["sh","-c","sysctl -w vm.max_map_count=262144 && ulimit -n 65535 && ulimit -u 4096"]
          securityContext:
            privileged: true
      volumes:
          - name: timezone
            hostPath:
                path: /etc/localtime
                type: File
      {{ include "smtc.platform.node-selector" $ }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: database
                  operator: In
                  values:
                  - "yes"
              topologyKey: "kubernetes.io/hostname"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $officeName }}-camera-gateway-db-init
  labels:
      app: {{ $officeName }}-camera-gateway-db-init
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ $officeName }}-camera-gateway-db-init
  template:
    metadata:
      labels:
        app: {{ $officeName }}-camera-gateway-db-init
    spec:
      securityContext:
        fsGroup: {{ $.Values.groupId }}
      enableServiceLinks: false
      containers:
        - name: {{ $officeName }}-camera-gateway-db-init
          image: {{ $.Values.registryPrefix }}smtc_db_init:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: OFFICE
              {{- $args := dict "scenarioName" $scenarioName "Values" $.Values "officeIdx" $officeIdx }}
              value: {{ include "smtc.env.office" $args | quote }}
            - name: DBHOST
              value: "http://{{ $officeName }}-camera-gateway-db-service:9200"
            - name: SCENARIO
              value: {{ $scenarioName | quote }}
            - name: REPLICAS
              value: "{{ if gt (int $.Values.database.haCloud) 1 }}1{{ else }}0{{ end }},{{ if gt (int $.Values.database.haOffice) 1 }}1{{ else }}0{{ end }}"
            - name: NO_PROXY
              value: "*"
            - name: no_proxy
              value: "*"
          volumeMounts:
            - mountPath: /etc/localtime
              name: timezone
              readOnly: true
            - mountPath: /var/run/secrets
              name: sensor-info
              readOnly: true
      volumes:
          - name: timezone
            hostPath:
                path: /etc/localtime
                type: File
          - name: sensor-info
            configMap:
                name: sensor-info
      {{ include "smtc.platform.node-selector" $ }}
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ $officeName }}-camera-gateway-db
            topologyKey: "kubernetes.io/hostname"

{{- end }}
---

{{- end }}
{{- end }}
{{- end }}
